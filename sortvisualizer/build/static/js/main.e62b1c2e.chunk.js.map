{"version":3,"sources":["Header.js","Visualizer.js","MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Visualizer","state","array","processID","info","name","swaps","access","comparisons","sorts","data","getColor","value","max","clearSelectedElements","i","length","setSelected","setState","index","selected","clearProcess","currentProcess","finished","r","doProcess","scrambleArray","bubbleSort","shortBubbleSort","quickSort","insertSort","selectSort","update","handleEvent","id","swapValues","indexA","indexB","valueA","getValue","pushIntoArray","newIndex","oldIndex","lo","Math","min","hi","getRndInteger","saveChanges","compareValues","scrambleIterative","shuffleIndex","valueB","pass","left","right","splice","push","prev","slice","current","next","concat","main","alt","j","this","bind","setInterval","styles","map","item","key","style","height","backgroundColor","indexOf","onClick","e","floor","random","MainComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAEaA,EAAb,iLAEQ,OACI,yBAAKC,UAAU,UACX,0BAAMA,UAAU,SAAhB,0BAJhB,GAA4BC,a,OCAfC,EAAb,2MAEIC,MAAQ,CACJC,MAAQ,GACRC,WAAa,EACbC,KAAO,CACHC,KAAO,GACPC,MAAQ,EACRC,OAAS,EACTC,YAAc,GAElBC,MAAQ,CACJ,CACIJ,KAAM,WAINK,KAAO,EAAE,IAEb,CACIL,KAAM,SAMNK,KAAO,EAAE,GAAI,GAAI,IAErB,CACIL,KAAM,eAMNK,KAAO,EAAE,GAAI,GAAI,IAErB,CACIL,KAAM,QAQNK,KAAO,EAAE,IAEb,CACIL,KAAM,SAKNK,KAAO,EAAE,GAAI,IAEjB,CACIL,KAAM,SAMNK,KAAO,EAAE,GAAI,GAAI,MA/DjC,EA6HIC,SAAW,SAACC,EAAOC,GAEf,MAAO,mBADGD,EAAMC,EAAK,GAAI,IACM,KA/HvC,EAkIIC,sBAAwB,WAEpB,IAF2B,IACtBZ,EAAS,EAAKD,MAAdC,MACIa,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IAC9Bb,EAAQ,EAAKe,YAAYf,EAAOa,EAAG,GAEvC,EAAKG,SAAS,CAAChB,WAvIvB,EA0IIe,YAAc,SAACf,EAAOiB,EAAOP,GAEzB,OADAV,EAAMiB,GAAOC,SAAWR,EACjBV,GA5If,EAmJImB,aAAe,WAAO,IACblB,EAAa,EAAKF,MAAlBE,UACDM,EAAQ,EAAKR,MAAMQ,MACnBa,EAAiBb,EAAMN,GAE3BA,GAAa,EACb,IAAK,IAAIY,EAAI,EAAGA,EAAIO,EAAeZ,KAAKM,OAAQD,IAC5CO,EAAeZ,KAAKK,IAAM,EAG9B,EAAKG,SAAS,CAACf,YAAWM,WA7JlC,EAgKIc,SAAW,WAAO,IAGVC,EAHS,EACc,EAAKvB,MAAzBE,EADM,EACNA,UAAWD,EADL,EACKA,MACZoB,EAAiB,EAAKrB,MAAMQ,MAAMN,GA6CxC,OA3CkB,IAAdA,EAIAqB,EACIF,EAAeZ,KAAK,KAAOR,EAAMc,OAAO,EAEvB,IAAdb,EAIPqB,EACIF,EAAeZ,KAAK,IAAM,GAAKY,EAAeZ,KAAK,IAAMR,EAAMc,OAAO,EAErD,IAAdb,EAIPqB,EACIF,EAAeZ,KAAK,IAAM,GAAKY,EAAeZ,KAAK,IAAMR,EAAMc,OAAO,EAAEM,EAAeZ,KAAK,GAE3E,IAAdP,EAIPqB,EAC+B,IAA3BF,EAAeZ,KAAK,GAEH,IAAdP,EAIPqB,EACEF,EAAeZ,KAAK,KAAOR,EAAMc,OAEd,IAAdb,IAIPqB,EACIF,EAAeZ,KAAK,KAAOR,EAAMc,OAAO,GAGzCQ,GA/Mf,EAkNIC,UAAY,WAAO,IAAD,EACa,EAAKxB,MAAzBE,EADO,EACPA,UAAWD,EADJ,EACIA,MAElB,IAAmB,IAAfC,EAAJ,CAHc,IAMPO,EAAQ,EAAKT,MAAMQ,MAAMN,GAAzBO,KACW,IAAdP,EACA,EAAKuB,cAAcxB,EAAOQ,GACL,IAAdP,EACP,EAAKwB,WAAWzB,EAAOQ,GACF,IAAdP,EACP,EAAKyB,gBAAgB1B,EAAOQ,GACP,IAAdP,EACP,EAAK0B,UAAU3B,EAAOQ,GACD,IAAdP,EACP,EAAK2B,WAAW5B,EAAOQ,GACF,IAAdP,GACP,EAAK4B,WAAW7B,EAAMQ,KApOlC,EAwOIsB,OAAS,WACD,EAAKT,YACL,EAAKT,wBACL,EAAKO,gBAEL,EAAKI,aA7OjB,EAiPIQ,YAAc,SAAAC,GACV,IAA8B,IAA1B,EAAKjC,MAAME,UAAkB,CAC7B,IAAME,EAAO,EAAKJ,MAAMQ,MAAMyB,GAAI7B,KAClC,EAAKa,SAAS,CACVf,UAAW+B,EACX9B,KAAO,CACHC,OACAC,MAAQ,EACRC,OAAS,EACTC,YAAc,OA1PlC,EA4QI2B,WAAa,SAACjC,EAAOkC,EAAQC,GAAY,IAChCjC,EAAQ,EAAKH,MAAbG,KACLA,EAAKE,OAAS,EACd,EAAKY,SAAS,CAACd,SAEf,IAAIkC,EAAS,EAAKC,SAASrC,EAAMkC,GAIjC,OAHAlC,EAAMkC,GAAQxB,MAAQ,EAAK2B,SAASrC,EAAMmC,GAC1CnC,EAAMmC,GAAQzB,MAAQ0B,EAEfpC,GArRf,EAwRIsC,cAAgB,SAACtC,EAAOuC,EAAUC,GAC9B,GAAID,IAAaC,EACb,OAAOxC,EAKX,IAHA,IAAIyC,EAAKC,KAAKC,IAAIJ,EAASC,GACvBI,EAAKF,KAAK/B,IAAI4B,EAASC,GAElB3B,EAAI4B,EAAI5B,EAAI+B,EAAI/B,IACrBb,EAAQ,EAAKiC,WAAWjC,EAAOa,EAAGA,EAAI,GAG1C,OAAOb,GAnSf,EAsSIwB,cAAgB,SAACxB,EAAOQ,GAAU,IAAD,EACdA,EAAV0B,EADwB,oBAG7B,EAAKtB,wBAIL,IAAI+B,IAFJT,EAGIvB,EAAMX,EAAMc,OAAO,EAEnBqB,EAAS,EAAKU,cAAcF,EAAIhC,GAEpCX,EAAQ,EAAKiC,WAAWjC,EAAOkC,EAAQC,GAEvCnC,EAAQ,EAAKe,YAAYf,EAAOmC,EAAQ,GACxCnC,EAAQ,EAAKe,YAAYf,EAAOkC,EAAQ,GAExC1B,EAAO,CAAC0B,GAER,EAAKY,YAAY9C,EAAMQ,IAzT/B,EA4TIsC,YAAc,SAAC9C,EAAOQ,GAClB,EAAKQ,SAAS,CAAChB,UADY,MAEF,EAAKD,MAAzBE,EAFsB,EAEtBA,UAAWM,EAFW,EAEXA,MAChBA,EAAMN,GAAWO,KAAOA,EACxB,EAAKQ,SAAS,CAACT,WAhUvB,EAmUI8B,SAAW,SAACrC,EAAMiB,GAAW,IACpBf,EAAQ,EAAKH,MAAbG,KAIL,OAHAA,EAAKG,QAAU,EACf,EAAKW,SAAS,CAACd,SAERF,EAAMiB,GAAOP,OAxU5B,EA2UIqC,cAAgB,SAAC/C,EAAOkC,EAAQC,GAAY,IACnCjC,EAAQ,EAAKH,MAAbG,KAGL,OAFAA,EAAKI,aAAe,EACpB,EAAKU,SAAS,CAACd,SACR,EAAKmC,SAASrC,EAAMkC,GAAU,EAAKG,SAASrC,EAAMmC,IA/UjE,EAkVIa,kBAAoB,SAAChD,GACjB,IAAK,IAAIa,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IAAK,CACnC,IAAI8B,EAAM9B,EAAE,EACRF,EAAMX,EAAMc,OAAO,EAEnBsB,EAASpC,EAAMa,GAAGH,MAClBuC,EAAe,EAAKJ,cAAcF,EAAIhC,GAEtCuC,EAASlD,EAAMiD,GAAcvC,MAEjCV,EAAMiD,GAAcvC,MAAQ0B,EAC5BpC,EAAMa,GAAGH,MAAQwC,IA7V7B,EAqWIzB,WAAa,SAACzB,EAAOQ,GAAU,IAAD,EACCA,EADD,mBACrBS,EADqB,KACdb,EADc,KACP+C,EADO,KAE1B,EAAKvC,0BAELK,GAEajB,EAAMc,OAAO,IACtBG,EAAQ,EACRb,EAAQ,EACR+C,KAGJnD,EAAQ,EAAKe,YAAYf,EAAOiB,EAAO,GACvCjB,EAAQ,EAAKe,YAAYf,EAAOiB,EAAM,EAAG,GAErC,EAAK8B,cAAc/C,EAAOiB,EAAOA,EAAM,KACvCb,IACAJ,EAAQ,EAAKiC,WAAWjC,EAAMiB,EAAMA,EAAM,IAG9CT,EAAO,CAACS,EAAOb,EAAO+C,GACtB,EAAKL,YAAY9C,EAAMQ,IA1X/B,EA6XIkB,gBAAkB,SAAC1B,EAAOQ,GAAU,IAAD,EACJA,EADI,mBAC1BS,EAD0B,KACnBb,EADmB,KACZ+C,EADY,KAE/B,EAAKvC,0BAELK,GAEajB,EAAMc,OAAO,EAAEqC,IACxBlC,EAAQ,EACRb,EAAQ,EACR+C,KAGJnD,EAAQ,EAAKe,YAAYf,EAAOiB,EAAO,GACvCjB,EAAQ,EAAKe,YAAYf,EAAOiB,EAAM,EAAG,GAErC,EAAK8B,cAAc/C,EAAOiB,EAAOA,EAAM,KACvCb,IACAJ,EAAQ,EAAKiC,WAAWjC,EAAMiB,EAAMA,EAAM,IAG9CT,EAAO,CAACS,EAAOb,EAAO+C,GACtB,EAAKL,YAAY9C,EAAMQ,IAlZ/B,EAqZImB,UAAa,SAAC3B,EAAOQ,IACA,IAAbA,EAAK,KACLA,EAAK,GAAK,EAAE,GAAI,GAAI,GAAI,GAAI,IAFN,kBAKSA,EAAK,GALd,GAKrBS,EALqB,KAKdmC,EALc,KAKRC,EALQ,KAKDZ,EALC,KAKGG,EALH,KAa1B,GAPA,EAAKhC,wBAED6B,EAAK,IACLA,EAAK,EACLG,EAAK5C,EAAMc,QAGX8B,EAAGH,EAAK,EAMR,OALAjC,EAAK8C,OAAO,EAAE,GACM,IAAhB9C,EAAKM,QACLN,EAAK+C,KAAK,QAEd,EAAKT,YAAY9C,EAAOQ,GAI5B,IAEIgD,EAAOxD,EAAMyD,MAAM,EAAEhB,GACrBiB,EAAU1D,EAAMyD,MAAMhB,EAAGG,GACzBe,EAAO3D,EAAMyD,MAAMb,EAAG5C,EAAMc,QAE5BG,EAAQ,IACRA,EAAQ,EACRoC,EAAQK,EAAQ5C,OAAO,GAG3B,EAAKC,YAAYf,EAAOiB,EAAMwB,EAAI,GAClC,EAAK1B,YAAYf,EAZL,EAYkByC,EAAI,GAClC,EAAK1B,YAAYf,EAAOyC,EAAG,EAAG,GAC9B,EAAK1B,YAAYf,EAAOqD,EAAMZ,EAAI,GAClC,EAAK1B,YAAYf,EAAOyC,EAAI,GAC5B,EAAK1B,YAAYf,EAAO4C,EAAG,EAAG,IAChB,IAAVQ,GACA,EAAKrC,YAAYf,EAAOyC,EAAGW,EAAM,GAGjCnC,GAASoC,GACK,IAAVD,EACK,EAAKL,cAAcW,EAASzC,EAvB7B,GA0BAmC,EAAOnC,EAFPA,IAKAmC,IAASM,EAAQ5C,OAAS,GAC1BsC,GAAQ,EACRC,MAEAK,EAAU,EAAKzB,WAAWyB,EAASN,EAAMA,EAAO,GAChDA,KAlCA,EAsCInC,EAAM,IAAe,IAAVmC,EACnBA,EAvCI,EAwCGA,EAAOnC,EAAM,IAAe,IAAVmC,GACzBM,EAAU,EAAKzB,WAAWyB,EAASN,EAAMA,EAAK,GAC9CA,MAEAA,GAAQ,EAGR5C,EAAK+C,KAAM,EAAE,GAAI,GAAI,EAAGd,EAAGxB,EAAO2B,IAGlCA,EAAKH,EAAGxB,EAAM,EACdA,GAAS,EACToC,GAAS,GAIjBrD,EAAQwD,EAAKI,OAAOF,EAAQC,GAE5BnD,EAAK,GAAK,CAACS,EAAOmC,EAAMC,EAAOZ,EAAIG,GACnC,EAAKE,YAAY9C,EAAOQ,IAtehC,EAyeIoB,WAAa,SAAC5B,EAAMQ,GAAU,IAAD,EACPA,EADO,mBACpBqD,EADoB,KACdC,EADc,KAEzB,EAAKlD,yBAES,IAAViD,IAEAC,EADAD,EAAO,GAIX7D,EAAQ,EAAKe,YAAYf,EAAO8D,EAAK,GACrC9D,EAAQ,EAAKe,YAAYf,EAAO6D,EAAM,GAElCC,GAAO,GAAK,EAAKf,cAAc/C,EAAM8D,EAAIA,EAAI,GAE7CA,EADAD,GAAc,GAGd7D,EAAQ,EAAKiC,WAAWjC,EAAO8D,EAAKA,EAAI,GACxCA,IAAQ,GAGZtD,EAAO,CAACqD,EAAMC,GACd,EAAKhB,YAAY9C,EAAMQ,IA9f/B,EAigBIqB,WAAa,SAAC7B,EAAMQ,GAAU,IAAD,EACPA,EADO,mBACpBK,EADoB,KACjBkD,EADiB,KACdpB,EADc,MAEd,IAAP9B,IAEAkD,GADAlD,EAAI,GACE,EACN8B,EAAM9B,GAEV,EAAKD,wBAEL,EAAKG,YAAYf,EAAMa,EAAE,GACzB,EAAKE,YAAYf,EAAM+D,EAAE,GACzB,EAAKhD,YAAYf,EAAM2C,EAAI,GAEtB,EAAKI,cAAc/C,EAAM+D,EAAEpB,KAC5BA,EAAMoB,KAEVA,IAEU/D,EAAMc,SACR6B,IAAQ9B,IACRb,EAAQ,EAAKiC,WAAWjC,EAAMa,EAAE8B,IAGpCA,IADA9B,EAEAkD,EAAIlD,EAAI,GAGZL,EAAO,CAACK,EAAGkD,EAAGpB,GACd,EAAKG,YAAY9C,EAAMQ,IA7hB/B,mFA2EQ,IAFA,IACIR,EAAQ,GACHa,EAAI,EAAGA,EAFD,GAEeA,IAC1Bb,EAAMuD,KAAK,CACP7C,MAAQG,EAAE,EACVK,SAAW,IAMnB8C,KAAKhD,SAAS,CAAChB,UACfgE,KAAKjC,YAAciC,KAAKjC,YAAYkC,KAAKD,MACzCE,YAAYF,KAAKlC,OAAO,MAtFhC,+BAyFc,IAAD,SACwBkC,KAAKjE,MAA3BQ,EADF,EACEA,MAAOL,EADT,EACSA,KAAMF,EADf,EACeA,MACdmE,EAAS,CAAC,GAAG,MAAO,MAAM,QAAQ,QAExC,OACI,yBAAKvE,UAAU,QAEX,yBAAKA,UAAU,SACVI,EAAMoE,KAAI,SAAAC,GAAS,OAChB,yBAAKC,IAAKD,EAAK3D,MAAOd,UAAU,OAC5B,yBAAK2E,MAAO,CAACC,OAAUH,EAAK3D,MAAMV,EAAMc,OAAQ,GAAI,IAAK2D,gBAAiB,EAAKhE,SAAS4D,EAAK3D,MAAMV,EAAMc,SAAWlB,UAAW,UAAUyE,EAAKnD,SAAW,EAAE,YAAYiD,EAAOE,EAAKnD,UAAU,WAKzM,yBAAKtB,UAAU,QACX,8BAAOM,EAAKC,KAAM,SAClB,8BAAOD,EAAKE,MAAM,UAClB,8BAAOF,EAAKG,OAAO,mBACnB,8BAAOH,EAAKI,YAAY,iBAE5B,yBAAKV,UAAU,SACVW,EAAM6D,KAAI,SAAAC,GAAS,OAChB,yBAAKC,IAAK/D,EAAMmE,QAAQL,GAAOzE,UAAU,MAAM+E,QAAS,SAACC,GAAD,OAAO,EAAK7C,YAAYxB,EAAMmE,QAAQL,MACzFA,EAAKlE,aAjHlC,oCAoQkBwC,EAAKhC,GACf,OAAO+B,KAAKmC,MAAMnC,KAAKoC,UAAYnE,EAAMgC,IAASA,MArQ1D,GAAgC9C,aCEnBkF,EAAb,iLAEQ,OACI,yBAAKnF,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,WALhB,GAAmCC,aCMpBmF,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e62b1c2e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport class Header extends Component {\n    render() {\n        return (\n            <div className='header'>\n                <span className='title'> Sort Visualizer </span>\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\n\nexport class Visualizer extends Component {\n\n    state = {\n        array : [],\n        processID : -1,\n        info : {\n            name : '',\n            swaps : 0,\n            access : 0,\n            comparisons : 0\n        },\n        sorts : [\n            {\n                name: 'Scramble',\n                /*\n                indexA\n                 */\n                data : [-1]\n            },\n            {\n                name: 'Bubble',\n                /*\n                index\n                swaps\n                pass\n                 */\n                data : [-1, -1, -1]\n            },\n            {\n                name: 'Short Bubble',\n                /*\n                index\n                swaps\n                pass\n                 */\n                data : [-1, -1, -1]\n            },\n            {\n                name: 'Quick',\n                /*\n                index\n                left\n                right\n                lo\n                hi\n                 */\n                data : [-1]\n            },\n            {\n                name: 'Insert',\n                /*\n                main\n                alt\n                 */\n                data : [-1, -1]\n            },\n            {\n                name: 'Select',\n                /*\n                i\n                j\n                min\n                 */\n                data : [-1, -1, -1]\n            },\n        ]\n    };\n\n/*\n        COMPONENT METHODS\n */\n\n    componentDidMount() {\n        let maxValue = 50;\n        let array = [];\n        for (let i = 0; i < maxValue; i++) {\n            array.push({\n                value : i+1,\n                selected : 0\n            });\n        }\n\n        // this.scrambleIterative(array);\n\n        this.setState({array});\n        this.handleEvent = this.handleEvent.bind(this);\n        setInterval(this.update,20);\n    }\n\n    render() {\n        const {sorts, info, array} = this.state;\n        const styles = ['','one', 'two','three','four'];\n\n        return (\n            <div className='view'>\n\n                <div className='graph'>\n                    {array.map(item => {return(\n                        <div key={item.value} className='bar'>\n                            <div style={{height: ((item.value/array.length)*90)+'%', backgroundColor: this.getColor(item.value,array.length) }} className={'value '+(item.selected > 0?'selected '+styles[item.selected]:'')}>\n                            </div>\n                        </div>\n                    )})}\n                </div>\n                <div className='info'>\n                    <span>{info.name+ ' sort'}</span>\n                    <span>{info.swaps+' swaps'}</span>\n                    <span>{info.access+' array accesses'}</span>\n                    <span>{info.comparisons+' comparisons'}</span>\n                </div>\n                <div className='panel'>\n                    {sorts.map(item => {return(\n                        <div key={sorts.indexOf(item)} className='btn' onClick={(e) => this.handleEvent(sorts.indexOf(item))}>\n                            {item.name}\n                        </div>\n                    )})}\n                </div>\n            </div>\n        );\n    }\n\n/*\n        VISUAL METHODS\n */\n\n    getColor = (value, max) => {\n        let p = ((value/max)*.9)+.1;\n        return 'rgba(9,211,172,' + p + ')';\n    };\n\n    clearSelectedElements = () => {\n        let {array} = this.state;\n        for (let i = 0; i < array.length; i++) {\n            array = this.setSelected(array, i, 0);\n        }\n        this.setState({array});\n    };\n\n    setSelected = (array, index, value) => {\n        array[index].selected = value;\n        return array;\n    };\n\n/*\n        UPDATE METHODS\n */\n\n    clearProcess = () => {\n        let {processID} = this.state;\n        let sorts = this.state.sorts;\n        let currentProcess = sorts[processID];\n\n        processID = -1;\n        for (let i = 0; i < currentProcess.data.length; i++) {\n            currentProcess.data[i] = -1;\n        }\n\n        this.setState({processID, sorts});\n    };\n\n    finished = () => {\n        const {processID, array} = this.state;\n        const currentProcess = this.state.sorts[processID];\n        let r;\n        if (processID === 0) {\n            /*\n            data.indexA === array.length-1\n             */\n            r = (\n                currentProcess.data[0] === array.length-1\n            );\n        } else if (processID === 1) {\n            /*\n            data.swapsDone === 0 && data.index >= array.length-2\n             */\n            r = (\n                currentProcess.data[1] <= 0 && currentProcess.data[0] >= array.length-2\n            );\n        } else if (processID === 2) {\n            /*\n            data.swapsDone === 0 && data.index >= array.length-2-data.pass\n             */\n            r = (\n                currentProcess.data[1] <= 0 && currentProcess.data[0] >= array.length-3-currentProcess.data[2]\n            );\n        } else if (processID === 3) {\n            /*\n                data.index >= array.length\n             */\n            r = (\n                currentProcess.data[0] === 1\n            );\n        } else if (processID === 4) {\n            /*\n                data.main === array.length-1\n             */\n            r = (\n              currentProcess.data[0] === array.length\n            );\n        } else if (processID === 5) {\n            /*\n                data.i === array.length\n             */\n            r = (\n                currentProcess.data[0] === array.length-1\n            );\n        }\n        return r;\n    };\n\n    doProcess = () => {\n        const {processID, array} = this.state;\n\n        if (processID === -1)\n            return;\n\n        const {data} = this.state.sorts[processID];\n        if (processID === 0) {\n            this.scrambleArray(array, data);\n        } else if (processID === 1) {\n            this.bubbleSort(array, data);\n        } else if (processID === 2) {\n            this.shortBubbleSort(array, data);\n        } else if (processID === 3) {\n            this.quickSort(array, data);\n        } else if (processID === 4) {\n            this.insertSort(array, data);\n        } else if (processID === 5) {\n            this.selectSort(array,data);\n        }\n    };\n\n    update = () => {\n        if (this.finished()) {\n            this.clearSelectedElements();\n            this.clearProcess();\n        } else {\n            this.doProcess();\n        }\n    };\n\n    handleEvent = id => {\n        if (this.state.processID === -1) {\n            const name = this.state.sorts[id].name;\n            this.setState({\n                processID: id,\n                info : {\n                    name,\n                    swaps : 0,\n                    access : 0,\n                    comparisons : 0\n                }\n            });\n        }\n    };\n\n/*\n            FUNCTIONAL METHODS\n */\n\n    getRndInteger(min, max) {\n        return Math.floor(Math.random() * (max - min) ) + min;\n    }\n\n/*\n        ARRAY HANDLING METHODS\n */\n\n    swapValues = (array, indexA, indexB) => {\n        let {info} = this.state;\n        info.swaps += 1;\n        this.setState({info});\n\n        let valueA = this.getValue(array,indexA);\n        array[indexA].value = this.getValue(array,indexB);\n        array[indexB].value = valueA;\n\n        return array;\n    };\n\n    pushIntoArray = (array, newIndex, oldIndex) => {\n        if (newIndex === oldIndex)\n            return array;\n\n        let lo = Math.min(newIndex,oldIndex);\n        let hi = Math.max(newIndex,oldIndex);\n\n        for (let i = lo; i < hi; i++) {\n            array = this.swapValues(array, i, i + 1);\n        }\n\n        return array;\n    };\n\n    scrambleArray = (array, data) => {\n        let [indexA] = data;\n\n        this.clearSelectedElements();\n\n        indexA ++;\n\n        let min = indexA;\n        let max = array.length-1;\n\n        let indexB = this.getRndInteger(min,max);\n\n        array = this.swapValues(array, indexA, indexB);\n\n        array = this.setSelected(array, indexB, 1);\n        array = this.setSelected(array, indexA, 2);\n\n        data = [indexA];\n\n        this.saveChanges(array,data);\n    };\n\n    saveChanges = (array, data) => {\n        this.setState({array});\n        let {processID, sorts} = this.state;\n        sorts[processID].data = data;\n        this.setState({sorts});\n    };\n\n    getValue = (array,index) => {\n        let {info} = this.state;\n        info.access += 1;\n        this.setState({info});\n\n        return array[index].value;\n    };\n\n    compareValues = (array, indexA, indexB) => {\n        let {info} = this.state;\n        info.comparisons += 1;\n        this.setState({info});\n        return this.getValue(array,indexA) > this.getValue(array,indexB);\n    };\n\n    scrambleIterative = (array) => {\n        for (let i = 0; i < array.length; i++) {\n            let min = i+1;\n            let max = array.length-1;\n\n            let valueA = array[i].value;\n            let shuffleIndex = this.getRndInteger(min,max);\n\n            let valueB = array[shuffleIndex].value;\n\n            array[shuffleIndex].value = valueA;\n            array[i].value = valueB;\n        }\n    };\n\n/*\n        SORTS\n */\n\n    bubbleSort = (array, data) => {\n        let [index, swaps, pass] = data;\n        this.clearSelectedElements();\n\n        index ++;\n\n        if (index >= array.length-1) {\n            index = 0;\n            swaps = 0;\n            pass ++;\n        }\n\n        array = this.setSelected(array, index, 1);\n        array = this.setSelected(array, index+1, 1);\n\n        if (this.compareValues(array, index, index+1)) {\n            swaps ++;\n            array = this.swapValues(array,index,index+1);\n        }\n\n        data = [index, swaps, pass];\n        this.saveChanges(array,data);\n    };\n\n    shortBubbleSort = (array, data) => {\n        let [index, swaps, pass] = data;\n        this.clearSelectedElements();\n\n        index ++;\n\n        if (index >= array.length-2-pass) {\n            index = 0;\n            swaps = 0;\n            pass ++;\n        }\n\n        array = this.setSelected(array, index, 1);\n        array = this.setSelected(array, index+1, 1);\n\n        if (this.compareValues(array, index, index+1)) {\n            swaps ++;\n            array = this.swapValues(array,index,index+1);\n        }\n\n        data = [index, swaps, pass];\n        this.saveChanges(array,data);\n    };\n\n    quickSort  = (array, data) => {\n        if (data[0] === -1) {\n            data[0] = [-1, -1, -1, -1, -1];\n        }\n\n        let [index, left, right, lo, hi] = data[0];\n        this.clearSelectedElements();\n\n        if (lo < 0) {\n            lo = 0;\n            hi = array.length;\n        }\n\n        if (hi-lo < 2) {\n            data.splice(0,1);\n            if (data.length === 0) {\n                data.push(1);\n            }\n            this.saveChanges(array, data);\n            return;\n        }\n\n        let pivot = 0;\n\n        let prev = array.slice(0,lo);\n        let current = array.slice(lo,hi);\n        let next = array.slice(hi,array.length);\n\n        if (index < 0) {\n            index = 1;\n            right = current.length-1;\n        }\n\n        this.setSelected(array, index+lo, 1);\n        this.setSelected(array, pivot+lo, 3);\n        this.setSelected(array, lo+1, 4);\n        this.setSelected(array, right+lo, 4);\n        this.setSelected(array, lo, 2);\n        this.setSelected(array, hi-1, 2);\n        if (left !== -1) {\n            this.setSelected(array, lo+left, 3);\n        }\n\n        if (index <= right) {\n            if (left === -1) {\n                if (!this.compareValues(current, index, pivot)) {\n                    index++;\n                } else {\n                    left = index;\n                }\n            } else {\n                if (left === current.length - 1) {\n                    left = -1;\n                    right--;\n                } else {\n                    current = this.swapValues(current, left, left + 1);\n                    left++;\n                }\n            }\n        } else {\n            if (pivot < index-1 && left === -1) {\n                left = pivot;\n            } else if (left < index-1 && left !== -1) {\n                current = this.swapValues(current, left, left+1);\n                left++;\n            } else {\n                left = -1;\n\n                // setting up for next next cycle\n                data.push( [-1, -1, -1, lo+index, hi] );\n\n                // setting up for next cycle\n                hi = lo+index-1;\n                index = -1;\n                right = -1;\n            }\n        }\n\n        array = prev.concat(current,next);\n\n        data[0] = [index, left, right, lo, hi];\n        this.saveChanges(array, data);\n    };\n\n    insertSort = (array,data) => {\n        let [main, alt] = data;\n        this.clearSelectedElements();\n\n        if (main === -1) {\n            main = 1;\n            alt = main;\n        }\n\n        array = this.setSelected(array, alt, 1);\n        array = this.setSelected(array, main, 2);\n\n        if (alt <= 0 || this.compareValues(array,alt,alt-1)) {\n            main = main + 1;\n            alt = main;\n        } else {\n            array = this.swapValues(array, alt, alt-1);\n            alt += -1;\n        }\n\n        data = [main, alt];\n        this.saveChanges(array,data);\n    };\n\n    selectSort = (array,data) => {\n        let [i, j, min] = data;\n        if (i === -1) {\n            i = 0;\n            j = i+1;\n            min = i;\n        }\n        this.clearSelectedElements();\n\n        this.setSelected(array,i,2);\n        this.setSelected(array,j,1);\n        this.setSelected(array,min,3);\n\n        if (!this.compareValues(array,j,min)) {\n            min = j;\n        }\n        j++;\n\n        if (j === array.length) {\n            if (min !== i) {\n                array = this.swapValues(array,i,min);\n            }\n            i ++;\n            min = i;\n            j = i + 1;\n        }\n\n        data = [i, j, min];\n        this.saveChanges(array,data);\n    }\n}\n","import React, {Component} from 'react';\nimport {Header} from \"./Header\";\nimport {Visualizer} from \"./Visualizer\";\n\nexport class MainComponent extends Component {\n    render() {\n        return (\n            <div className='app'>\n                <Header/>\n                <Visualizer/>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.scss';\nimport {MainComponent} from \"./MainComponent\";\n\nfunction App() {\n  return (\n    <MainComponent />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}