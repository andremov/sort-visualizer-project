{"version":3,"sources":["Header.js","Visualizer.js","MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Visualizer","state","array","processID","info","name","swaps","access","comparisons","sorts","data","getColor","value","max","clearSelectedElements","i","length","setSelected","setState","index","selected","clearProcess","currentProcess","finished","r","doProcess","scrambleArray","bubbleSort","bubbleSort2","quicksort","update","handleEvent","id","swapValues","indexA","indexB","valueA","getValue","pushIntoArray","newIndex","oldIndex","lo","Math","min","hi","getRndInteger","saveChanges","compareValues","scrambleIterative","shuffleIndex","valueB","pass","right","splice","push","prev","slice","current","next","concat","this","bind","setInterval","styles","map","item","key","style","height","backgroundColor","indexOf","onClick","e","floor","random","MainComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb0f592d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n                <span className='title'> Sort Visualizer </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport class Visualizer extends Component {\r\n\r\n    state = {\r\n        array : [],\r\n        processID : -1,\r\n        info : {\r\n            name : '',\r\n            swaps : 0,\r\n            access : 0,\r\n            comparisons : 0\r\n        },\r\n        sorts : [\r\n            {\r\n                name: 'Scramble',\r\n                /*\r\n                indexA\r\n                 */\r\n                data : [-1]\r\n            },\r\n            {\r\n                name: 'Bubble',\r\n                /*\r\n                index\r\n                swaps\r\n                pass\r\n                 */\r\n                data : [-1, -1, -1]\r\n            },\r\n            {\r\n                name: 'Bubble2',\r\n                /*\r\n                index\r\n                swaps\r\n                pass\r\n                 */\r\n                data : [-1, -1, -1]\r\n            },\r\n            {\r\n                name: 'Quick',\r\n                /*\r\n                index\r\n                right\r\n                lo\r\n                hi\r\n                 */\r\n                data : [-1]\r\n            }\r\n        ]\r\n    };\r\n\r\n/*\r\n        COMPONENT METHODS\r\n */\r\n\r\n    componentDidMount() {\r\n        let maxValue = 50;\r\n        let array = [];\r\n        for (let i = 0; i < maxValue; i++) {\r\n            array.push({\r\n                value : i+1,\r\n                selected : 0\r\n            });\r\n        }\r\n\r\n        // this.scrambleIterative(array);\r\n\r\n        this.setState({array});\r\n        this.handleEvent = this.handleEvent.bind(this);\r\n        setInterval(this.update,20);\r\n    }\r\n\r\n    render() {\r\n        const {sorts, info, array} = this.state;\r\n        const styles = ['','one', 'two','three','four'];\r\n\r\n        return (\r\n            <div className='view'>\r\n\r\n                <div className='graph'>\r\n                    {array.map(item => {return(\r\n                        <div key={item.value} className='bar'>\r\n                            <div style={{height: ((item.value/array.length)*90)+'%', backgroundColor: this.getColor(item.value,array.length) }} className={'value '+(item.selected > 0?'selected '+styles[item.selected]:'')}>\r\n                            </div>\r\n                        </div>\r\n                    )})}\r\n                </div>\r\n                <div className='info'>\r\n                    <span>{info.name+ ' sort'}</span>\r\n                    <span>{info.swaps+' swaps'}</span>\r\n                    <span>{info.access+' array accesses'}</span>\r\n                    <span>{info.comparisons+' comparisons'}</span>\r\n                </div>\r\n                <div className='panel'>\r\n                    {sorts.map(item => {return(\r\n                        <div key={sorts.indexOf(item)} className='btn' onClick={(e) => this.handleEvent(sorts.indexOf(item))}>\r\n                            {item.name}\r\n                        </div>\r\n                    )})}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n/*\r\n        VISUAL METHODS\r\n */\r\n\r\n    getColor = (value, max) => {\r\n        let p = ((value/max)*.9)+.1;\r\n        return 'rgba(9,211,172,' + p + ')';\r\n    };\r\n\r\n    clearSelectedElements = () => {\r\n        let {array} = this.state;\r\n        for (let i = 0; i < array.length; i++) {\r\n            array = this.setSelected(array, i, 0);\r\n        }\r\n        this.setState({array});\r\n    };\r\n\r\n    setSelected = (array, index, value) => {\r\n        array[index].selected = value;\r\n        return array;\r\n    };\r\n\r\n/*\r\n        UPDATE METHODS\r\n */\r\n\r\n    clearProcess = () => {\r\n        let {processID} = this.state;\r\n        let sorts = this.state.sorts;\r\n        let currentProcess = sorts[processID];\r\n\r\n        processID = -1;\r\n        for (let i = 0; i < currentProcess.data.length; i++) {\r\n            currentProcess.data[i] = -1;\r\n        }\r\n\r\n        this.setState({processID, sorts});\r\n    };\r\n\r\n    finished = () => {\r\n        const {processID, array} = this.state;\r\n        const currentProcess = this.state.sorts[processID];\r\n        let r;\r\n        if (processID === 0) {\r\n            /*\r\n            data.indexA === array.length-1\r\n             */\r\n            r = (\r\n                currentProcess.data[0] === array.length-1\r\n            );\r\n        } else if (processID === 1) {\r\n            /*\r\n            data.swapsDone === 0 && data.index >= array.length-2\r\n             */\r\n            r = (\r\n                currentProcess.data[1] <= 0 && currentProcess.data[0] >= array.length-2\r\n            );\r\n        } else if (processID === 2) {\r\n            /*\r\n            data.swapsDone === 0 && data.index >= array.length-2-data.pass\r\n             */\r\n            r = (\r\n                currentProcess.data[1] <= 0 && currentProcess.data[0] >= array.length-3-currentProcess.data[2]\r\n            );\r\n        } else if (processID === 3) {\r\n            /*\r\n                data.index >= array.length\r\n             */\r\n            r = (\r\n                currentProcess.data[0] === 1\r\n            );\r\n        }\r\n        return r;\r\n    };\r\n\r\n    doProcess = () => {\r\n        const {processID, array} = this.state;\r\n\r\n        if (processID === -1)\r\n            return;\r\n\r\n        const {data} = this.state.sorts[processID];\r\n        if (processID === 0) {\r\n            this.scrambleArray(array, data);\r\n        } else if (processID === 1) {\r\n            this.bubbleSort(array, data);\r\n        } else if (processID === 2) {\r\n            this.bubbleSort2(array, data);\r\n        } else if (processID === 3) {\r\n            this.quicksort(array, data);\r\n        }\r\n    };\r\n\r\n    update = () => {\r\n        if (this.finished()) {\r\n            this.clearSelectedElements();\r\n            this.clearProcess();\r\n        } else {\r\n            this.doProcess();\r\n        }\r\n    };\r\n\r\n    handleEvent = id => {\r\n        if (this.state.processID === -1) {\r\n            const name = this.state.sorts[id].name;\r\n            this.setState({\r\n                processID: id,\r\n                info : {\r\n                    name,\r\n                    swaps : 0,\r\n                    access : 0,\r\n                    comparisons : 0\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n/*\r\n            FUNCTIONAL METHODS\r\n */\r\n\r\n    getRndInteger(min, max) {\r\n        return Math.floor(Math.random() * (max - min) ) + min;\r\n    }\r\n\r\n/*\r\n        ARRAY HANDLING METHODS\r\n */\r\n\r\n    swapValues = (array, indexA, indexB) => {\r\n        let {info} = this.state;\r\n        info.swaps += 1;\r\n        this.setState({info});\r\n\r\n        let valueA = this.getValue(array,indexA);\r\n        array[indexA].value = this.getValue(array,indexB);\r\n        array[indexB].value = valueA;\r\n\r\n        return array;\r\n    };\r\n\r\n    pushIntoArray = (array, newIndex, oldIndex) => {\r\n        if (newIndex === oldIndex)\r\n            return array;\r\n\r\n        let lo = Math.min(newIndex,oldIndex);\r\n        let hi = Math.max(newIndex,oldIndex);\r\n\r\n        if (oldIndex < newIndex) {\r\n            for (let i = lo; i < hi; i++) {\r\n                array = this.swapValues(array, i, i + 1);\r\n            }\r\n        } else {\r\n            for (let i = hi - 1; i >= lo; i--) {\r\n                array = this.swapValues(array, i, i + 1);\r\n            }\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    scrambleArray = (array, data) => {\r\n        let [indexA] = data;\r\n\r\n        this.clearSelectedElements();\r\n\r\n        indexA ++;\r\n\r\n        let min = indexA;\r\n        let max = array.length-1;\r\n\r\n        let indexB = this.getRndInteger(min,max);\r\n\r\n        array = this.swapValues(array, indexA, indexB);\r\n\r\n        array = this.setSelected(array, indexB, 1);\r\n        array = this.setSelected(array, indexA, 2);\r\n\r\n        data = [indexA];\r\n\r\n        this.saveChanges(array,data);\r\n    };\r\n\r\n    saveChanges = (array, data) => {\r\n        this.setState({array});\r\n        let {processID, sorts} = this.state;\r\n        sorts[processID].data = data;\r\n        this.setState({sorts});\r\n    };\r\n\r\n    getValue = (array,index) => {\r\n        let {info} = this.state;\r\n        info.access += 1;\r\n        this.setState({info});\r\n\r\n        return array[index].value;\r\n    };\r\n\r\n    compareValues = (array, indexA, indexB) => {\r\n        let {info} = this.state;\r\n        info.comparisons += 1;\r\n        this.setState({info});\r\n        return this.getValue(array,indexA) > this.getValue(array,indexB);\r\n    };\r\n\r\n    scrambleIterative = (array) => {\r\n        for (let i = 0; i < array.length; i++) {\r\n            let min = i+1;\r\n            let max = array.length-1;\r\n\r\n            let valueA = array[i].value;\r\n            let shuffleIndex = this.getRndInteger(min,max);\r\n\r\n            let valueB = array[shuffleIndex].value;\r\n\r\n            array[shuffleIndex].value = valueA;\r\n            array[i].value = valueB;\r\n        }\r\n    };\r\n\r\n/*\r\n        SORTS\r\n */\r\n\r\n    bubbleSort = (array, data) => {\r\n        let [index, swaps, pass] = data;\r\n\r\n        this.clearSelectedElements();\r\n\r\n        index ++;\r\n\r\n        if (index >= array.length-1) {\r\n            index = 0;\r\n            swaps = 0;\r\n            pass ++;\r\n        }\r\n\r\n        array = this.setSelected(array, index, 1);\r\n        array = this.setSelected(array, index+1, 1);\r\n\r\n        if (this.compareValues(array, index, index+1)) {\r\n            swaps ++;\r\n            array = this.swapValues(array,index,index+1);\r\n        }\r\n\r\n        data = [index, swaps, pass];\r\n        this.saveChanges(array,data);\r\n    };\r\n\r\n    bubbleSort2 = (array, data) => {\r\n        let [index, swaps, pass] = data;\r\n\r\n        this.clearSelectedElements();\r\n\r\n        index ++;\r\n\r\n        if (index >= array.length-2-pass) {\r\n            index = 0;\r\n            swaps = 0;\r\n            pass ++;\r\n        }\r\n\r\n        array = this.setSelected(array, index, 1);\r\n        array = this.setSelected(array, index+1, 1);\r\n\r\n        if (this.compareValues(array, index, index+1)) {\r\n            swaps ++;\r\n            array = this.swapValues(array,index,index+1);\r\n        }\r\n\r\n        data = [index, swaps, pass];\r\n        this.saveChanges(array,data);\r\n    };\r\n\r\n    quicksort  = (array, data) => {\r\n        if (data[0] === -1) {\r\n            data[0] = [-1, -1, -1, -1];\r\n        }\r\n\r\n        let [index, right, lo, hi] = data[0];\r\n        this.clearSelectedElements();\r\n\r\n        if (lo < 0) {\r\n            lo = 0;\r\n            hi = array.length;\r\n        }\r\n\r\n        if (hi-lo < 2) {\r\n            data.splice(0,1);\r\n            if (data.length === 0) {\r\n                data.push(1);\r\n            }\r\n            this.saveChanges(array, data);\r\n            return;\r\n        }\r\n\r\n        let pivot = 0;\r\n\r\n        let prev = array.slice(0,lo);\r\n        let current = array.slice(lo,hi);\r\n        let next = array.slice(hi,array.length);\r\n\r\n        if (index < 0) {\r\n            index = 1;\r\n            right = current.length-1;\r\n        }\r\n\r\n        this.setSelected(array, index+lo, 1);\r\n        this.setSelected(array, pivot+lo, 3);\r\n        this.setSelected(array, lo+1, 4);\r\n        this.setSelected(array, right+lo, 4);\r\n        this.setSelected(array, lo, 2);\r\n        this.setSelected(array, hi-1, 2);\r\n\r\n        if(!this.compareValues(current, index, pivot)) {\r\n            index++;\r\n        } else {\r\n            current = this.pushIntoArray(current, current.length-1, index);\r\n            right--;\r\n        }\r\n\r\n        if (index > right) {\r\n            current = this.pushIntoArray(current, index-1, pivot);\r\n\r\n            // setting up for next next cycle\r\n            data.push( [-1, -1, lo+index, hi] );\r\n\r\n            // setting up for next cycle\r\n            hi = lo+index-1;\r\n            index = -1;\r\n            right = -1;\r\n        }\r\n\r\n        array = prev.concat(current,next);\r\n\r\n        data[0] = [index, right, lo, hi];\r\n        this.saveChanges(array, data);\r\n    };\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {Visualizer} from \"./Visualizer\";\r\n\r\nexport class MainComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className='app'>\r\n                <Header/>\r\n                <Visualizer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {MainComponent} from \"./MainComponent\";\n\nfunction App() {\n  return (\n    <MainComponent />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}